2016-06-29
=================
1. Photo gallery optimization:
    - make modal in the middle of the window;
    - 'pText' get from the `[title]` of the `<img>`, get `header` from the `[alt]` of the `<img>`;
    - pagination added; (also added for `/blogs` but still need to test)

2. Blog creatation page:


2016-06-28
=================
1. Photo gallery designed by [Michael Soriano](https://github.com/michaelsoriano/bootstrap-photo-gallery) is successfully applied. But still needs to be fixed.
    - transition animation applied to photo where mouse hovers on.
    - change the height and width dynamically by Javascript.
    - make the max col of the gallery 3

2016-06-27
=================
1. Encrypted with HMAC with key `"Hanker"`;
    ```python
    import hmac
    msg = "inputPassword"
    password = hmac.new("Hanker", msg).hexdigest()
    ```
    ```javascript
    // <script src="../static/js/md5.min.js"></script>
    msg = $("#inputPassword").val();
    password = md5(msg, "Hanker").toString();
    ```

2. Log-In with `POST` method, action on `/admin_login`. If success, redirect to `/manage/index`; if fail, redirect to `/admin_login?failed=1`

3. Log-in username is `admin`, log-in password is `ibanezandschecter`

4. `/manage` sites:
    - `/manage/index`: homepage for manager with 4 buttons `@view('/manage/index.html')`
    - `/manage/blog_create`: blog edit page for create `@view('/manage/blog_edit.html')`
    - `/manage/blog_edit`
    - `/manage/blog_edit/:id`
    - `/manage/photo_create`
    - `/manage/photo_edit`
    - `/manage/photo_edit/:id`

5. No need to respect the expire-time and max-age of cookie, the browser would do it for u.

    >如果不设置过期时间，则表示这个cookie生命周期为浏览器会话期间，只要关闭浏览器窗口，cookie就消失了。这种生命期为浏览会话期的cookie被称为会话cookie。会话cookie一般不保存在硬盘上而是保存在内存里。
    >如果设置了过期时间(setMaxAge(606024))，浏览器就会把cookie保存到硬盘上，关闭后再次打开浏览器，这些cookie依然有效直到超过设定的过期时间。存储在硬盘上的cookie可以在不同的浏览器进程间共享，比如两个IE窗口。而对于保存在内存的cookie，不同的浏览器有不同的处理方式。(在IE下测试通过)

6. Things for tomorrow:
    - Photo gallary: the previous failure was caused by jQurey version
    - Vue.js plug-in and change the login function
    - add blog edit and photo edit HTML files


2016-06-23
=================
1. Start with logic/backend of the website first, then the frontend.

2. website logic:
    - Main page `@view(index.html)`
    - View blog page `@view(blog_view.html)`
        - variable needed `blog`, `tags`
    - Several blogs page `@view(blogs.html)`
        - variables needed `blogs`, `page`, `tags`
    - Photo page `@view(photos.html)`
        - display thumbnail of photos
        - handle by JavaScript like it does in Bing Gallary
        - variables needed `photos`, `page`
    - About.me page `@view(about.html)`
        - the instruments i have or have had
        - the earphone/headphone i have or have had
        - the video game console i have or have had
        - the computer I have or have had
        - the phone I have or have had
        - the band I am enthusiastic about
        - the Animate I have watched
        - the book I have read 
    - Admin login page `@view(login.html)`
        - this page is isolated, url is `/manage/admin_login`
        - After log in, redirect to `/manage/blog_create`
    - Manage blog page `@view(manage.html)`


2016-03-26
=================
1.  blocks for base.html:
    - {% block title %}
    - {% block nav_bar %} - only to set 'active'
    - {% block pagetitle %} - the title for this page, in the container
    - {% block content %} - the main content of this page
    - {% block funcript %} - put functional JS here
    - list archives - every page that extends base.html should return archives
        ```javascript
        {% for archive in archives %}
        <li><a href='{{ archive.href }}'>{{ archive.time }}</a></li>
        {% endfor %}
        ```

2.  ORM usage:
    - class method:
        - `get(cls, pk)`: get item by pk  
        - `find_first(cls,where,*args)`: find by where clause, return first item found
        - `find_all(class, order, *args)`: return a list of all items in `cls.__table__`
        - `find_by(cls, where, order, *args)`: find by where clause, return all items found
        - `cout_all(cls)`: count the num of items in talbe
        - `count_by(cls, where, *args)`: count the num of items according to the where clause
    - instance method:
        - `update(self)`: update the database by the vale of the instance
        - `delete(self)`: delete item from db by item's pk
        - `insert(self)`: create a new item in db by the instance

3. Things to be done:
    - Archives Problem:
        - When dynamically update the table `blogs` in database, archives won't change. But it consumes a lot server resources to update archives whenever get a page 
        - __sol__: make it refresh every 10 min
    - Why api always comes with 'POST' method?
        - ???
    - How to access POST data from wsgi?
        - When use ctx.request.get_body(), there would be no response from server?
        - Should use ctx.request.input(name='')?


2016-03-23
=================
1.  file hierarchy tree:

    > ./  
    > +.--app/  
    > +.--static/  
    > +.--templates/  
    > +.--manage/  
    > +.--admin/  
    > +.--transwarp/

2.  HTML Framework  - Bootstrap  
    Web Framework   - Transwarp with ORM from Michael Liao  
    Template Engine - Jinja2  
    DataBase        - MySQL

3.  Items for blogs
    - Home Page - '/'
    - Blogs - '/blogs'
        - make use of disquz as the comment
        - for each blog - '/blog/:blog.cr_year/:blog.cr_month/:blog_id'
    - Photos
        - make use of disquz as the comment
        - access as a static file 
        - for each photo, use JS to view full-size image
    - archives - '/archives'
    - About Me - '/about'
    - Admin login - '/admin_login'

4.  Database name:  MyBlog

    > table - blogs  
    > table - photos  
    > table - user(only store one admin)  
    > table - tags